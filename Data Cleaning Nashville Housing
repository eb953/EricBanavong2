--first part using Microsoft Sql Studio 


-- Standardize Date Format 

Select SaleDateConverted, Convert(Date, SaleDate)
From Portfolio..NashvilleHousing 

Update NashvilleHousing
Set SaleDate = Convert(Date, SaleDate)


Alter Table NashvilleHousing
Add SaleDateConverted Date; 

Update NashvilleHousing
Set SaleDateConverted = Convert(Date, SaleDate)



-- Populate Property Address Dates. There are duplicate parcelId's with same address yet have different unique ID. Some of the duplicate parcelID's have 
empty addresses. To fix this I join the table with itself on parcel ID. If parcelID A has address and second same parcelID B does not have address. 
I populate ParcelID B address with ParcelID A address. 

Select *
From Portfolio..NashvilleHousing 
--Where PropertyAddress is Null
Order by ParcelID


Select a.parcelid, a.propertyaddress, b.parcelid, b.propertyaddress, isnull(a.propertyaddress, b.propertyaddress)
From Portfolio..NashvilleHousing a
Join Portfolio..NashvilleHousing b
	on a.parcelid = b.parcelid
		and a.[uniqueid] <> b.[UniqueID] 
Where a.propertyaddress is null

Update a
Set PropertyAddress = isnull(a.propertyaddress, b.propertyaddress)
From Portfolio..NashvilleHousing a
Join Portfolio..NashvilleHousing b
	on a.parcelid = b.parcelid
		and a.[uniqueid] <> b.[UniqueID] 
Where a.propertyaddress is null




--Breaking out Address into Individual Columns (address, City, State) 

Select PropertyAddress
From Portfolio..NashvilleHousing 

Select 
Substring(PropertyAddress, 1, Charindex(',', PropertyAddress) -1) as Address, -- going to position 1 of the property address string and stopping at the delimiter (,) as the result. The -1 position so that result does not include comma
Substring(PropertyAddress, Charindex(',', PropertyAddress) +1, Len(PropertyAddress)) as City -- going to the delimiter then adding 1 more position past to result the length of the rest of the string
From Portfolio..NashvilleHousing 

Alter Table NashvilleHousing
Add PropertySplitAddress Nvarchar(255); 

Update NashvilleHousing
Set PropertySplitAddress = Substring(PropertyAddress, 1, Charindex(',', PropertyAddress) -1) 

Alter Table NashvilleHousing
Add PropertySplitCity Nvarchar(255); 

Update NashvilleHousing
Set PropertySplitCity = Substring(PropertyAddress, Charindex(',', PropertyAddress) +1, Len(PropertyAddress)) 

Select *
From Portfolio..NashvilleHousing --testing result 



-- Ownderaddress separate as property address. Used Parsename instead 

Select Owneraddress
From Portfolio..NashvilleHousing


Select 
Parsename(Replace(Owneraddress, ',','.'), 3) as Address
, Parsename(Replace(Owneraddress, ',','.'), 2) As City
, Parsename(Replace(Owneraddress, ',','.'), 1) As State
From Portfolio..NashvilleHousing


Alter Table NashvilleHousing
Add OwnerSplitAddress Nvarchar(255); 

Update NashvilleHousing
Set OwnerSplitAddress = Parsename(Replace(Owneraddress, ',','.'), 3)

Alter Table NashvilleHousing
Add OwnerSplitCity Nvarchar(255); 

Update NashvilleHousing
Set OwnerSplitCity = Parsename(Replace(Owneraddress, ',','.'), 2)

Alter Table NashvilleHousing
Add OwnerSplitState Nvarchar(255); 

Update NashvilleHousing
Set OwnerSplitState = Parsename(Replace(Owneraddress, ',','.'), 1)

Select *
From Portfolio..NashvilleHousing --testing result 


--Second part run using Azure Data Studio 
-- Change Y and N to Yes and No 

-- Finding out how many Y, N, yes, and no there are in the soldasvacant column

Select Distinct(SoldAsVacant), Count(SoldAsVacant)
From Master..NashvilleHousing
Group by soldasvacant
Order by 2

-- Using case, changing y and n to yes and no 

Select SoldAsVacant
,    Case when SoldasVacant = 'y' then 'yes'
         when SoldasVacant = 'n' then 'no'
         Else soldasvacant
         END
From Master..NashvilleHousing

--Updating changes into the original table nashvillehousing

Update Nashvillehousing 
Set Soldasvacant = Case when SoldasVacant = 'y' then 'yes'
         when SoldasVacant = 'n' then 'no'
         Else soldasvacant
         END
From Master..nashvillehousing



-- Remove Duplicates 

-- Below Query will select rows that are duplicates 

With RowNumCTE As( 
Select *, 
    Row_Number() Over (
        Partition by ParcelID,
        PropertyAddress,
        SalePrice,
        SaleDate,
        LegalReference
        Order by UniqueId
    ) row_num
From Master..NashvilleHousing 
)
Select *
From RowNumCTE
Where Row_NUM > 1
Order by PropertyAddress

--changing line 154 with DELETE will remove duplicates from table 

With RowNumCTE As( 
Select *, 
    Row_Number() Over (
        Partition by ParcelID,
        PropertyAddress,
        SalePrice,
        SaleDate,
        LegalReference
        Order by UniqueId
    ) row_num
From Master..NashvilleHousing 
)
Delete 
From RowNumCTE
Where Row_NUM > 1


-- Deleting unused columns such as original saledate, Owner address, property address, tax district.

Alter Table Master..NashvilleHousing 
Drop Column SaleDate, OwnerAddress, PropertyAddress, TaxDistrict
